{"ast":null,"code":"import PostForm from \"@/components/PostForm.vue\";\nimport PostList from \"@/components/PostList.vue\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    PostForm,\n    PostList\n  },\n\n  data() {\n    return {\n      posts: [],\n      dialogVisible: false,\n      isPostsLoading: false,\n      selectedSort: '',\n      searchQuery: '',\n      pageNumber: 1,\n      limit: 10,\n      totalPage: 0,\n      sortOptions: [{\n        value: 'title',\n        name: 'By title'\n      }, {\n        value: 'body',\n        name: 'By body'\n      }]\n    };\n  },\n\n  methods: {\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n\n    removePost(post) {\n      this.posts = this.posts.filter(p => p.id !== post.id);\n    },\n\n    showDialog() {\n      this.dialogVisible = true;\n    },\n\n    async fetchPosts() {\n      try {\n        this.isPostsLoading = true;\n        const response = await axios.get(\"https://jsonplaceholder.typicode.com/posts\", {\n          params: {\n            _page: this.page,\n            _limit: this.limit\n          }\n        });\n        this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit);\n        this.posts = response.data;\n      } catch (e) {\n        alert('Error');\n      } finally {\n        this.isPostsLoading = false;\n      }\n    }\n\n  },\n  computed: {\n    sortedPosts() {\n      return [...this.posts].sort((post1, post2) => {\n        return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort]);\n      });\n    },\n\n    sortAndSearchedPosts() {\n      return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n\n  },\n\n  mounted() {\n    this.fetchPosts();\n  }\n\n};","map":{"version":3,"mappings":"AAwDA,OAAOA,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe;EACbC,UAAU,EAAE;IACVH,QADU;IAEVC;EAFU,CADC;;EAMbG,IAAI,GAAG;IACL,OAAM;MACJC,KAAK,EAAE,EADH;MAEJC,aAAa,EAAE,KAFX;MAGJC,cAAc,EAAE,KAHZ;MAIJC,YAAY,EAAE,EAJV;MAKJC,WAAW,EAAE,EALT;MAMJC,UAAU,EAAE,CANR;MAOJC,KAAK,EAAE,EAPH;MAQJC,SAAS,EAAE,CARP;MASJC,WAAW,EAAE,CACX;QAACC,KAAK,EAAE,OAAR;QAAiBC,IAAI,EAAE;MAAvB,CADW,EAEX;QAACD,KAAK,EAAE,MAAR;QAAgBC,IAAI,EAAE;MAAtB,CAFW;IATT,CAAN;EAcD,CArBY;;EAuBbC,OAAO,EAAE;IACPC,UAAU,CAACC,IAAD,EAAO;MACf,KAAKb,KAAL,CAAWc,IAAX,CAAgBD,IAAhB;MACA,KAAKZ,aAAL,GAAqB,KAArB;IACD,CAJM;;IAKPc,UAAU,CAACF,IAAD,EAAO;MACf,KAAKb,KAAL,GAAa,KAAKA,KAAL,CAAWgB,MAAX,CAAkBC,KAAKA,CAAC,CAACC,EAAF,KAASL,IAAI,CAACK,EAArC,CAAb;IACD,CAPM;;IAQPC,UAAU,GAAG;MACX,KAAKlB,aAAL,GAAqB,IAArB;IACD,CAVM;;IAWP,MAAMmB,UAAN,GAAmB;MACjB,IAAI;QACF,KAAKlB,cAAL,GAAsB,IAAtB;QACA,MAAMmB,QAAO,GAAI,MAAMxB,KAAK,CAACyB,GAAN,CAAU,4CAAV,EAAwD;UAC7EC,MAAM,EAAE;YACNC,KAAK,EAAE,KAAKC,IADN;YAENC,MAAM,EAAE,KAAKpB;UAFP;QADqE,CAAxD,CAAvB;QAMA,KAAKqB,UAAL,GAAkBC,IAAI,CAACC,IAAL,CAAUR,QAAQ,CAACS,OAAT,CAAiB,eAAjB,IAAoC,KAAKxB,KAAnD,CAAlB;QACA,KAAKN,KAAL,GAAaqB,QAAQ,CAACtB,IAAtB;MACF,CAVA,CAUE,OAAOgC,CAAP,EAAU;QACVC,KAAK,CAAC,OAAD,CAAL;MACF,CAZA,SAYU;QACR,KAAK9B,cAAL,GAAsB,KAAtB;MACF;IACD;;EA3BM,CAvBI;EAoDb+B,QAAQ,EAAE;IACRC,WAAW,GAAG;MACZ,OAAO,CAAC,GAAG,KAAKlC,KAAT,EAAgBmC,IAAhB,CAAqB,CAACC,KAAD,EAAOC,KAAP,KAAiB;QAC3C,OAAOD,KAAK,CAAC,KAAKjC,YAAN,CAAL,EAA0BmC,aAA1B,CAAwCD,KAAK,CAAC,KAAKlC,YAAN,CAA7C,CAAP;MACD,CAFM,CAAP;IAGD,CALO;;IAMRoC,oBAAoB,GAAG;MACrB,OAAO,KAAKL,WAAL,CAAiBlB,MAAjB,CAAwBH,IAAG,IAAKA,IAAI,CAAC2B,KAAL,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC,KAAKtC,WAAL,CAAiBqC,WAAjB,EAAlC,CAAhC,CAAP;IACF;;EARQ,CApDG;;EA8DbE,OAAO,GAAG;IACV,KAAMvB,UAAN;EACC;;AAhEY,CAAf","names":["PostForm","PostList","axios","components","data","posts","dialogVisible","isPostsLoading","selectedSort","searchQuery","pageNumber","limit","totalPage","sortOptions","value","name","methods","createPost","post","push","removePost","filter","p","id","showDialog","fetchPosts","response","get","params","_page","page","_limit","totalPages","Math","ceil","headers","e","alert","computed","sortedPosts","sort","post1","post2","localeCompare","sortAndSearchedPosts","title","toLowerCase","includes","mounted"],"sourceRoot":"","sources":["C:\\Users\\Annni\\Desktop\\myPurpose\\training\\project1\\src\\App.vue"],"sourcesContent":["<template>\n  <div class = \"app\">\n\n    <h3>Page with posts</h3>\n    <my-input\n    v-model=\"searchQuery\"\n    placeholder=\"search...\"\n    />\n    <div class=\"app__btns\">\n\n    <my-button\n    @click=\"showDialog\"\n    >\n      Сreate a user\n    </my-button>\n    \n      <my-select\n        v-model=\"selectedSort\"\n        :options=\"sortOptions\"\n      />\n    </div>\n    \n    <my-dialog v-model:show=\"dialogVisible\">\n      <post-form\n      @create=\"createPost\"\n      />\n    </my-dialog>\n\n    <post-list\n      :posts=\"sortAndSearchedPosts\"\n      @remove=\"removePost\"\n      v-if=\"!isPostsLoading\"\n    />\n\n    <div v-else >\n      Идёт загрузка...\n    </div>\n\n    <div class=\"page__wrapper\">\n      <div \n      v-for=\"pageNumber in totalPages\"\n      :key=\"pageNumber\"\n      class=\"page\"\n      :class=\"{\n        'current-page': page === pageNumber\n        }\"\n      >\n      {{ pageNumber }}\n      </div>\n    </div>\n\n  </div>\n</template>\n\n\n<script>  \nimport PostForm from \"@/components/PostForm.vue\";\nimport PostList from \"@/components/PostList.vue\";\nimport axios from \"axios\";\n \nexport default {\n  components: {\n    PostForm,\n    PostList,\n  },\n\n  data() {\n    return{\n      posts: [],\n      dialogVisible: false,\n      isPostsLoading: false,\n      selectedSort: '',\n      searchQuery: '',\n      pageNumber: 1,\n      limit: 10,\n      totalPage: 0,\n      sortOptions: [\n        {value: 'title', name: 'By title'},\n        {value: 'body', name: 'By body'},\n      ]\n    }\n  },\n\n  methods: {\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n    removePost(post) {\n      this.posts = this.posts.filter(p => p.id !== post.id)\n    },\n    showDialog() {\n      this.dialogVisible = true;\n    },\n    async fetchPosts() {\n      try {\n        this.isPostsLoading = true;\n        const response = await axios.get(\"https://jsonplaceholder.typicode.com/posts\", {\n          params: {\n            _page: this.page,\n            _limit: this.limit,\n          }\n        })\n        this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)\n        this.posts = response.data;\n      } catch (e) {\n        alert('Error')\n      } finally {\n        this.isPostsLoading = false;\n      }\n    },\n  },\n  computed: {\n    sortedPosts() {\n      return [...this.posts].sort((post1,post2) => {\n        return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])\n      })\n    },\n    sortAndSearchedPosts() {\n      return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()))\n    }\n  },\n  mounted() {\n  this. fetchPosts()\n  },\n}\n</script>\n\n\n<style>\n* {\n  color: #616161;\n  background-color: #212121;\n  padding: 0;\n  box-sizing: border-box;\n}\n.app{\n  padding: 20px;\n}\n.app__btns {\n  margin: 15px 0;\n  display: flex;\n  justify-content: space-between; /* кнопка напротив выпадающего списка */\n}\n.page_wrapper {\n  /* display: inline-block; */\n  display: flex;\n  margin-top: 15px;\n}\n.page {\n  border: 1px solid #000;\n  border-radius: 5px;\n  padding: 10px;\n}\n.current-page {\n  border: 2px solid #000;\n  border-radius: 5px;\n  padding: 10px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}